#include <iostream>
#include <math.h>
using namespace std;
/*
	1	2	3	4	5	6	7	8
	a	b	c	d	e	f	g	h
8				BLACK				8
7									7
6									6
5									5
4									4
3									3
2									2
1				WHITE				1
	a	b	c	d	e	f	g	h
	1	2	3	4	5	6	7	8
*/

int ah_to_int(char c) {
	switch (c - 'a') {
	case 0: return 1;
		break;
	case 1: return 2;
		break;
	case 2: return 3;
		break;
	case 3: return 4;
		break;
	case 4: return 5;
		break;
	case 5: return 6;
		break;
	case 6: return 7;
		break;
	case 7: return 8;
		break;
		return -1;
	}
}

string int_to_ah(int i) {
	switch (i) {
	case 1: return "a";
		break;
	case 2: return "b";
		break;
	case 3: return "c";
		break;
	case 4: return "d";
		break;
	case 5: return "e";
		break;
	case 6: return "f";
		break;
	case 7: return "g";
		break;
	case 8: return "h";
		break;
		return "sosy";
	}
}

class Chessman {
protected:
	int vertical;
	int horizontal;

	virtual bool can_it_move_to_position(int vertical, int horizontal) = 0;
public:
	int get_vertical() {
		return vertical;
	}

	int get_horizontal() {
		return horizontal;
	}

	void move_to_position(int vertical, int horizontal) {
		if (can_it_move_to_position(vertical, horizontal)) {
			this->vertical = vertical;
			this->horizontal = horizontal;
		}
		else
			throw "Can not move to this position!";
	}
	void print_the_position() {
		cout << "(";
		cout << int_to_ah(vertical);
		cout << "; ";
		cout << horizontal;
		cout << ")";
	}
};

class White_Pawn : public Chessman {
protected:
	bool can_it_move_to_position(int vertical, int horizontal) {
		if (vertical == this->get_vertical() && horizontal == this->get_horizontal() + 1)
			return true;
		return false;
	}
public:
	White_Pawn(int vertical, int horizontal) {
		this->vertical = vertical;
		this->horizontal = horizontal;
	}
};

class Knight : public Chessman {
protected:
	bool can_it_move_to_position(int vertical, int horizontal) {
		if ((abs(horizontal - this->get_horizontal()) == 2 && abs(vertical - this->get_vertical()) == 1) || (abs(horizontal - this->get_horizontal()) == 1 && abs(vertical - this->get_vertical()) == 2))
			return true;
		return false;
	}
public:
	Knight(int vertical, int horizontal) {
		this->vertical = vertical;
		this->horizontal = horizontal;
	}
};

class Queen : public Chessman {
protected:
	bool can_it_move_to_position(int vertical, int horizontal) {
		if (abs(horizontal - this->get_horizontal()) == abs(vertical - this->get_vertical()) || (horizontal - this->get_horizontal() != 0 && vertical - this->get_vertical() == 0) || (vertical - this->get_vertical() != 0 && horizontal - this->get_horizontal() == 0))
			return true;
		return false;
	}
public:
	Queen(int vertical, int horizontal) {
		this->vertical = vertical;
		this->horizontal = horizontal;
	}
};

class Bishop : public Chessman {
protected:
	bool can_it_move_to_position(int vertical, int horizontal) {
		if (abs(horizontal - this->get_horizontal()) == abs(vertical - this->get_vertical()))
			return true;
		return false;
	}
public:
	Bishop(int vertical, int horizontal) {
		this->vertical = vertical;
		this->horizontal = horizontal;
	}
};

class Rook : public Chessman {
protected:
	bool can_it_move_to_position(int vertical, int horizontal) {
		if ((horizontal - this->get_horizontal() != 0 && vertical - this->get_vertical() == 0) || (vertical - this->get_vertical() != 0 && horizontal - this->get_horizontal() == 0))
			return true;
		return false;
	}
public:
	Rook(int vertical, int horizontal) {
		this->vertical = vertical;
		this->horizontal = horizontal;
	}
};

class King : public Chessman {
protected:
	bool can_it_move_to_position(int vertical, int horizontal) {
		if (abs(horizontal - this->get_horizontal()) <= 1 && abs(vertical - this->get_vertical()) <= 1)
			return true;
		return false;
	}
public:
	King(int vertical, int horizontal) {
		this->vertical = vertical;
		this->horizontal = horizontal;
	}
};

int main() {
	Chessman* white_team[16];
	white_team[0] = &White_Pawn(1, 2);
	white_team[1] = &White_Pawn(2, 2);
	white_team[2] = &White_Pawn(3, 2);
	white_team[3] = &White_Pawn(4, 2);
	white_team[4] = &White_Pawn(5, 2);
	white_team[5] = &White_Pawn(6, 2);
	white_team[6] = &White_Pawn(7, 2);
	white_team[7] = &White_Pawn(8, 2);

	white_team[8] = &Knight(2, 1);
	white_team[9] = &Knight(7, 1);
	white_team[10] = &Queen(4, 1);
	white_team[11] = &Bishop(3, 1);
	white_team[12] = &Bishop(6, 1);
	white_team[13] = &Rook(1, 1);
	white_team[14] = &Rook(8, 1);
	white_team[15] = &King(5, 1);


	int vertical_1, horizontal_1, vertical_2, horizontal_2;
	char vertical_1_char, vertical_2_char;

	while (true) {
		cin >> vertical_1_char >> horizontal_1;
		vertical_1 = ah_to_int(vertical_1_char);
		int i = 0;
		for (; i < 16; i++) {
			if (white_team[i]->get_vertical() == vertical_1 && white_team[i]->get_horizontal() == horizontal_1) {
				break;
			}
		}
		if (i >= 16) {
			cout << "Incorrect position, try again!\n";
			continue;
		}
		cin >> vertical_2_char >> horizontal_2;
		vertical_2 = ah_to_int(vertical_2_char);
		try {
			cout << "Move: ";
			white_team[i]->print_the_position();
			cout << " -> ";

			white_team[i]->move_to_position(vertical_2, horizontal_2);

			white_team[i]->print_the_position();
			cout << "\n";
		}
		catch (const char* msg) {
			cerr << msg << endl;
		}
	}
}
